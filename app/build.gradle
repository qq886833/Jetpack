apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'android-aspectjx'

apply plugin: 'walle'
apply plugin: 'AndResGuard'
// 依赖插件脚本
apply from: 'tinker-support.gradle'

android {

    //配置应用的签名信息
    signingConfigs {
        release {
            storeFile file("${rootProject.rootDir.absolutePath}/Tank.key")
            keyAlias 'tank'
            keyPassword '198739zkl'
            storePassword '198739zkl'
            v1SigningEnabled true
            v2SigningEnabled true

        }
    }


    compileSdkVersion Versions.target_sdk
    buildToolsVersion Versions.build_tools
    defaultConfig {
       // applicationId "com.bsoft.mhealthp.jkcs"
        applicationId APP_PACKAGE_NAME
        minSdkVersion Versions.min_sdk
        targetSdkVersion Versions.target_sdk
        versionCode Versions.version_code
        versionName Versions.version_name

        manifestPlaceholders = [BAIDU_LBS    : BAIDU_APPKEY_VALUE,
                                JPUSH_PKGNAME: applicationId,
                                JPUSH_APPKEY : JPUSH_APPKEY_VALUE, //JPush 上注册的包名对应的 Appkey.
                                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
        ]
        //必须要保证所有的flavor 都属于同一个维度
        flavorDimensions "default"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }
        multiDexEnabled = true
        vectorDrawables.useSupportLibrary = true  //使用vector矢量图

        resConfigs 'en','cn'  //保留配置的国际化

        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }



        //***************************网络环境配置********************************
//        buildConfigField 'String', 'environment', '"kaifa"'//开发
//        buildConfigField 'String', 'environment', '"ceshi"' //测试
//        buildConfigField 'String', 'environment', '"ceshi2"' //测试2
//        buildConfigField 'String', 'environment', '"yufa"'//预发-华为云
        buildConfigField 'String', 'environment', ENVIRONMENT  //正式-华为云
    }
    buildTypes {
       release {
            minifyEnabled true    //是否开启混淆
            shrinkResources true  //用来开启删除无用资源，也就是没有被引用的文件  两者必须同时配置true才有效
            signingConfig signingConfigs.release //增加签名
            //zip对齐
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }
        debug {
            minifyEnabled true    //是否开启混淆
            shrinkResources true  //用来开启删除无用资源，也就是没有被引用的文件  两者必须同时配置true才有效

//            minifyEnabled false    //是否开启混淆
//            shrinkResources false  //用来开启删除无用资源，也就是没有被引用的文件  两者必须同时配置true才有效
            signingConfig signingConfigs.release //增加签名
            //zip对齐
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

//    productFlavors {
//
//
//        A{
//                applicationId APP_PACKAGE_NAME
//                minSdkVersion Versions.min_sdk
//                targetSdkVersion Versions.target_sdk
//                versionCode Versions.version_code
//                versionName Versions.version_name
//
//                manifestPlaceholders = [BAIDU_LBS    : BAIDU_APPKEY_VALUE,
//                                        JPUSH_PKGNAME: applicationId,
//                                        JPUSH_APPKEY : JPUSH_APPKEY_VALUE, //JPush 上注册的包名对应的 Appkey.
//                                        JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
//                ]
//
//            }
//        B{
//            applicationId APP_PACKAGE_NAME
//            minSdkVersion Versions.min_sdk
//            targetSdkVersion Versions.target_sdk
//            versionCode Versions.version_code
//            versionName Versions.version_name
//
//            manifestPlaceholders = [BAIDU_LBS    : "GY8xVfmedAFe37ZqRja4sgMaDqEG6HI0",
//                                    JPUSH_PKGNAME: applicationId,
//                                    JPUSH_APPKEY : JPUSH_APPKEY_VALUE, //JPush 上注册的包名对应的 Appkey.
//                                    JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
//            ]
//
//        }
//
//
//    }


    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
    //统一资源前缀，规范资源引用
   // resourcePrefix "app_"
    dataBinding {
        enabled = true
    }
    dexOptions {

        javaMaxHeapSize '4g'
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
    //程序在编译的时候会检查lint，有任何错误提示会停止build，我们可以关闭这个开关
    lintOptions {
        abortOnError false
        //即使报错也不会停止打包
        checkReleaseBuilds false
        //打包release版本的时候进行检测

    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    // used by Room, to test migrations
    sourceSets {
        androidTest.assets.srcDirs +=
                files("$projectDir/schemas".toString())
    }
    repositories {
        flatDir {
            dirs 'libs', '../libpay/libs'
        }
    }
    aspectjx {  //使用此插件会导致支付宝支付闪退
//排除所有package路径中包含`android.support`的class文件及库（jar文件）
        exclude 'com.alipay.sdk'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation Deps.kotlin_stdlib
    implementation Deps.appcompat
    kapt Deps.arouter_compiler
    api Deps.aspectjrt
    
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'


    api project(path: ':guide')
    api project(path: ':login')
    implementation project(path: ':libnet')
    api project(path: ':libmain')
    api project(path: ':message')
    api project(path: ':family')
    api project(path: ':libwebview')



    api project(path: ':libpay')
    kapt project(":libnavcompiler")
    implementation project(path: ':libnavannotation')

    implementation Deps.walle
    //jpush
    implementation 'cn.jiguang.sdk:jpush:3.2.0'  // 此处以JPush 3.2.0 版本为例。
    implementation 'cn.jiguang.sdk:jcore:2.0.0'  // 此处以JCore 2.0.0 版本为例。


    implementation('com.tencent.tinker:tinker-android-lib:1.9.1')
    implementation 'com.tencent.bugly:crashreport_upgrade:latest.release'
    //1. 指定tinker依赖版本（注：应用升级1.3.5版本起，不再内置tinker）
    //2.为了便于解答问题，这里的tinker版本建议跟随此处demo设置，如果微信更新了tinker版本，bugly会定期同步更新
    implementation 'com.tencent.tinker:tinker-android-lib:1.9.14.3'
    implementation 'com.tencent.bugly:nativecrashreport:latest.release'
}

walle {
    apkOutputFolder = new File("${project.buildDir}/outputs/channels")
    apkFileNameFormat = '${appName}-${packageName}-${channel}-${buildType}-v${versionName}-${versionCode}-${buildTime}-${flavorName}.apk'
    //configFile与channelFile两者必须存在一个，否则无法生成渠道包。两者都存在时优先执行configFile
    channelFile = new File("${project.getProjectDir()}/channel")
    //configFile = new File("${project.getProjectDir()}/config.json")
}


andResGuard {
    // mappingFile = file("./resource_mapping.txt")
    mappingFile = null
    use7zip = true
    useSign = true
    // It will keep the origin path of your resources when it's true
    keepRoot = false
    // If set, name column in arsc those need to proguard will be kept to this value
    fixedResName = "arg"
    // It will merge the duplicated resources, but don't rely on this feature too much.
    // it's always better to remove duplicated resource from repo
    mergeDuplicatedRes = true
    whiteList = [
            // your icon
            "R.drawable.icon",
            // for fabric
            "R.string.com.crashlytics.*",
            // for google-services
            "R.string.google_app_id",
            "R.string.gcm_defaultSenderId",
            "R.string.default_web_client_id",
            "R.string.ga_trackingId",
            "R.string.firebase_database_url",
            "R.string.google_api_key",
            "R.string.google_crash_reporting_api_key"
    ]
    compressFilePattern = [
            "*.png",
            "*.jpg",
            "*.jpeg",
            "*.gif",
    ]
    sevenzip {
        artifact = 'com.tencent.mm:SevenZip:1.2.17'
        //path = "/usr/local/bin/7za"
    }

    /**
     * Optional: if finalApkBackupPath is null, AndResGuard will overwrite final apk
     * to the path which assemble[Task] write to
     **/
    // finalApkBackupPath = "${project.rootDir}/final.apk"

    /**
     * Optional: Specifies the name of the message digest algorithm to user when digesting the entries of JAR file
     * Only works in V1signing, default value is "SHA-1"
     **/
    // digestalg = "SHA-256"
}








